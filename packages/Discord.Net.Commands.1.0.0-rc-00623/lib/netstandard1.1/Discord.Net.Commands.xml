<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Discord.Net.Commands</name>
    </assembly>
    <members>
        <member name="T:Discord.Commands.AliasAttribute">
            <summary> Provides aliases for a command. </summary>
        </member>
        <member name="P:Discord.Commands.AliasAttribute.Aliases">
            <summary> The aliases which have been defined for the command. </summary>
        </member>
        <member name="M:Discord.Commands.AliasAttribute.#ctor(System.String[])">
            <summary> Creates a new <see cref="T:Discord.Commands.AliasAttribute"/> with the given aliases. </summary>
        </member>
        <member name="T:Discord.Commands.RequireBotPermissionAttribute">
            <summary>
            This attribute requires that the bot has a specified permission in the channel a command is invoked in.
            </summary>
        </member>
        <member name="M:Discord.Commands.RequireBotPermissionAttribute.#ctor(Discord.GuildPermission)">
            <summary>
            Require that the bot account has a specified GuildPermission
            </summary>
            <remarks>This precondition will always fail if the command is being invoked in a private channel.</remarks>
            <param name="permission">The GuildPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together.</param>
        </member>
        <member name="M:Discord.Commands.RequireBotPermissionAttribute.#ctor(Discord.ChannelPermission)">
            <summary>
            Require that the bot account has a specified ChannelPermission.
            </summary>
            <param name="permission">The ChannelPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together.</param>
            <example>
            <code language="c#">
                [Command("permission")]
                [RequireBotPermission(ChannelPermission.ManageMessages)]
                public async Task Purge()
                {
                }
            </code>
            </example>
        </member>
        <member name="T:Discord.Commands.RequireContextAttribute">
            <summary>
            Require that the command be invoked in a specified context.
            </summary>
        </member>
        <member name="M:Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)">
            <summary>
            Require that the command be invoked in a specified context.
            </summary>
            <param name="contexts">The type of context the command can be invoked in. Multiple contexts can be specified by ORing the contexts together.</param>
            <example>
            <code language="c#">
                [Command("private_only")]
                [RequireContext(ContextType.DM | ContextType.Group)]
                public async Task PrivateOnly()
                {
                }
            </code>
            </example>
        </member>
        <member name="T:Discord.Commands.RequireOwnerAttribute">
            <summary>
            Require that the command is invoked by the owner of the bot.
            </summary>
            <remarks>This precondition will only work if the bot is a bot account.</remarks>
        </member>
        <member name="T:Discord.Commands.RequireUserPermissionAttribute">
            <summary>
            This attribute requires that the user invoking the command has a specified permission.
            </summary>
        </member>
        <member name="M:Discord.Commands.RequireUserPermissionAttribute.#ctor(Discord.GuildPermission)">
            <summary>
            Require that the user invoking the command has a specified GuildPermission
            </summary>
            <remarks>This precondition will always fail if the command is being invoked in a private channel.</remarks>
            <param name="permission">The GuildPermission that the user must have. Multiple permissions can be specified by ORing the permissions together.</param>
        </member>
        <member name="M:Discord.Commands.RequireUserPermissionAttribute.#ctor(Discord.ChannelPermission)">
            <summary>
            Require that the user invoking the command has a specified ChannelPermission.
            </summary>
            <param name="permission">The ChannelPermission that the user must have. Multiple permissions can be specified by ORing the permissions together.</param>
            <example>
            <code language="c#">
                [Command("permission")]
                [RequireUserPermission(ChannelPermission.ReadMessageHistory | ChannelPermission.ReadMessages)]
                public async Task HasPermission()
                {
                    await ReplyAsync("You can read messages and the message history!");
                }
            </code>
            </example>
        </member>
        <member name="T:Discord.Commands.PriorityAttribute">
            <summary> Sets priority of commands </summary>
        </member>
        <member name="P:Discord.Commands.PriorityAttribute.Priority">
            <summary> The priority which has been set for the command </summary>
        </member>
        <member name="M:Discord.Commands.PriorityAttribute.#ctor(System.Int32)">
            <summary> Creates a new <see cref="T:Discord.Commands.PriorityAttribute"/> with the given priority. </summary>
        </member>
        <member name="P:Discord.Commands.CommandServiceConfig.DefaultRunMode">
            <summary> The default RunMode commands should have, if one is not specified on the Command attribute or builder. </summary>
        </member>
        <member name="P:Discord.Commands.CommandServiceConfig.CaseSensitiveCommands">
            <summary> Should commands be case-sensitive? </summary>
        </member>
        <member name="M:Discord.Commands.DependencyMap.Add``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.TryAdd``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.AddTransient``1">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.TryAddTransient``1">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.AddTransient``2">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.AddFactory``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.TryAddFactory``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.Get``1">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.Get(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.TryGet``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.DependencyMap.TryGet(System.Type,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Commands.IDependencyMap.Add``1(``0)">
            <summary>
            Add an instance of a service to be injected.
            </summary>
            <typeparam name="T">The type of service.</typeparam>
            <param name="obj">The instance of a service.</param>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.TryAdd``1(``0)">
            <summary>
            Tries to add an instance of a service to be injected.
            </summary>
            <typeparam name="T">The type of service.</typeparam>
            <param name="obj">The instance of a service.</param>
            <returns>A bool, indicating if the service was successfully added to the DependencyMap.</returns>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.AddTransient``1">
            <summary>
            Add a service that will be injected by a new instance every time.
            </summary>
            <typeparam name="T">The type of instance to inject.</typeparam>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.TryAddTransient``1">
            <summary>
            Tries to add a service that will be injected by a new instance every time.
            </summary>
            <typeparam name="T">The type of instance to inject.</typeparam>
            <returns>A bool, indicating if the service was successfully added to the DependencyMap.</returns>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.AddTransient``2">
            <summary>
            Add a service that will be injected by a new instance every time.
            </summary>
            <typeparam name="TKey">The type to look for when injecting.</typeparam>
            <typeparam name="TImpl">The type to inject when injecting.</typeparam>
            <example>
            map.AddTransient&#60;IService, Service&#62;
            </example>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.TryAddTransient``2">
            <summary>
            Tries to add a service that will be injected by a new instance every time.
            </summary>
            <typeparam name="TKey">The type to look for when injecting.</typeparam>
            <typeparam name="TImpl">The type to inject when injecting.</typeparam>
            <returns>A bool, indicating if the service was successfully added to the DependencyMap.</returns>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.AddFactory``1(System.Func{``0})">
            <summary>
            Add a service that will be injected by a factory.
            </summary>
            <typeparam name="T">The type to look for when injecting.</typeparam>
            <param name="factory">The factory that returns a type of this service.</param>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.TryAddFactory``1(System.Func{``0})">
            <summary>
            Tries to add a service that will be injected by a factory.
            </summary>
            <typeparam name="T">The type to look for when injecting.</typeparam>
            <param name="factory">The factory that returns a type of this service.</param>
            <returns>A bool, indicating if the service was successfully added to the DependencyMap.</returns>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.Get``1">
            <summary>
            Pull an object from the map.
            </summary>
            <typeparam name="T">The type of service.</typeparam>
            <returns>An instance of this service.</returns>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.TryGet``1(``0@)">
            <summary>
            Try to pull an object from the map.
            </summary>
            <typeparam name="T">The type of service.</typeparam>
            <param name="result">The instance of this service.</param>
            <returns>Whether or not this object could be found in the map.</returns>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.Get(System.Type)">
            <summary>
            Pull an object from the map.
            </summary>
            <param name="t">The type of service.</param>
            <returns>An instance of this service.</returns>
        </member>
        <member name="M:Discord.Commands.IDependencyMap.TryGet(System.Type,System.Object@)">
            <summary>
            Try to pull an object from the map.
            </summary>
            <param name="t">The type of service.</param>
            <param name="result">An instance of this service.</param>
            <returns>Whether or not this object could be found in the map.</returns>
        </member>
    </members>
</doc>
